{
  "Uuid": "fbd45723-5bfc-4c0e-a90a-3f362cccf4ce",
  "IsCustomNode": false,
  "Description": null,
  "Name": "AFD_Tower_GraphMap",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Circle.ByCenterPointRadius@Autodesk.DesignScript.Geometry.Point,double",
      "Id": "0a4fdc4604f0424aacbacd53c1ea32d1",
      "Inputs": [
        {
          "Id": "38c3d8ed3a9d44ddae8c8c011f1e63bc",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b060c60a3ce448f29b4668373687c86f",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "da46d679dd7f4cb4bf53f6c3acc994a3",
          "Name": "Circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Circle with input center Point and radius in the world XY plane, with world Z as normal.\n\nCircle.ByCenterPointRadius (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1): Circle"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 20.0,
      "MinimumValue": 5.0,
      "StepValue": 1.0,
      "InputValue": 12.0,
      "Id": "59866a0f503f48c7929fa0dd319b4093",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4885c3b645a743aea2d3052806d815a4",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 100.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "InputValue": 55.0,
      "Id": "45f51364bbc24f27939e9c1983707c23",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "feaf2d7aaebc4162be0f4ed759fa9cf3",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Polygon.RegularPolygon@Autodesk.DesignScript.Geometry.Circle,int",
      "Id": "a2f8fa7c4b934608ab901acc3efc37dc",
      "Inputs": [
        {
          "Id": "3ba780ffcc9c4db89a40ef39c0ba809c",
          "Name": "circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1f4e49b510c54765b0b0cbfcc55bd799",
          "Name": "numberSides",
          "Description": "int\nDefault value : 5",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72f10f14d6a84e9a899a8c7a205d31fa",
          "Name": "Polygon",
          "Description": "Polygon",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct an inscribed Polygon Curve within a circle.\n\nPolygon.RegularPolygon (circle: Circle, numberSides: int = 5): Polygon"
    },
    {
      "ConcreteType": "CoreNodeModels.Sequence, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "577ad8dfdef34e5fa560007cd45d58b7",
      "Inputs": [
        {
          "Id": "fa1d4a3f1e184d63915db771406aef90",
          "Name": "start",
          "Description": "Number or letter to start the sequence at\r\nDefault value: 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "031efae28de24053bacbdfe43c6d3d48",
          "Name": "amount",
          "Description": "Amount of numbers or letters in the sequence\r\nDefault value: 10",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb2da2b24d1a4a83a2ddd909db934146",
          "Name": "step",
          "Description": "Space between numbers or letters\r\nDefault value: 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4f9d2046be8947bb929ca4ecd236214c",
          "Name": "list",
          "Description": "New list of type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a sequence of numbers."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 600.0,
      "MinimumValue": 400.0,
      "StepValue": 50.0,
      "InputValue": 450.0,
      "Id": "09703ae471b5408194b7704a24335a83",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ef16d72338904c44a7b959c5bb9a5b13",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..1..#x+1;",
      "Id": "d22ebd2bbbaa47b1b1207c91e5b41e46",
      "Inputs": [
        {
          "Id": "b47a0601e6204531b2db84623542aa22",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "274e859ee6b046cdab7b56e948228095",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.ByElevation@double",
      "Id": "0714d60ac2714a2fae1b9e60338fcfa6",
      "Inputs": [
        {
          "Id": "1b133377bd5047d09a51b242ce3b96e5",
          "Name": "elevation",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0d3b3363a7e14644a7819c0c1425f728",
          "Name": "Level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit Level given it's elevation. The name will be whatever Revit gives it.\n\nLevel.ByElevation (elevation: double): Level"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FloorTypes, DSRevitNodesUI",
      "SelectedIndex": 4,
      "SelectedString": "Standard",
      "NodeType": "ExtensionNode",
      "Id": "2ae92e17de4645fea271e7f1d3c63312",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "67b849a22e9045a5b265879ac9ee4327",
          "Name": "Floor Type",
          "Description": "The selected Floor Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All floor types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.PointAtParameter@double",
      "Id": "d3f377306b37457c9cee5f110e85b5a6",
      "Inputs": [
        {
          "Id": "f45bd326c6d44f74a7733cf582d39280",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1a0d4880140743e1bb544bc00ce476b7",
          "Name": "param",
          "Description": "The parameter at which to evaluate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9992b4a82997497da72645d90a474f61",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Get a Point on the Curve at a specified parameter between StartParameter() and EndParameter()\n\nCurve.PointAtParameter (param: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "65a400c65db749ae89c9e614db75d593",
      "Inputs": [
        {
          "Id": "364ff1e1835548a4a9d3d1550f3c8a30",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "8fd4b36b791d49e4bdec3a626403a853",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fe2eab02e82849c3a241129ca7a96630",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Floor.ByOutlineTypeAndLevel@Autodesk.DesignScript.Geometry.PolyCurve,Revit.Elements.FloorType,Revit.Elements.Level",
      "Id": "0fe902b4ff2747a896ccbda113664e96",
      "Inputs": [
        {
          "Id": "2ed0081ea7c1403687e3a8b233f4912a",
          "Name": "outline",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7cb7cba229cf44a1934e8dd3ebc1c89c",
          "Name": "floorType",
          "Description": "FloorType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ec3069f77c134fd4bd867e7d776ac76a",
          "Name": "level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ca39492b35264f8cbab4673ad50af686",
          "Name": "Floor",
          "Description": "The floor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit Floor given its curve outline and Level\n\nFloor.ByOutlineTypeAndLevel (outline: PolyCurve, floorType: FloorType, level: Level): Floor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "211ac81d4aac45b7afc3a52047789130",
      "Inputs": [
        {
          "Id": "6bce9a1218ea4899babe4efabef1430e",
          "Name": "points",
          "Description": "Points to make polycurve\n\nPoint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "29bd42e47b4e460293c0cb55ccc8924c",
          "Name": "connectLastToFirst",
          "Description": "make close or open polycurve\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6244e06df0fc407996f1f20c19b246ae",
          "Name": "PolyCurve",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by connecting points. Set the 'connectLastToFirst' input to true to close the PolyCurve.\n\nPolyCurve.ByPoints (points: Point[], connectLastToFirst: bool = false): PolyCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Translate@double,double,double",
      "Id": "6e3c81152125464f9fc0dd688830a624",
      "Inputs": [
        {
          "Id": "7a79d55565e04b549090d362686482d4",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "69d68435de064bc49fa9c295ef9e0214",
          "Name": "xTranslation",
          "Description": "Displacement along X-axis.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb984587ce60462692d4f1b809b33ee3",
          "Name": "yTranslation",
          "Description": "Displacement along Y-axis.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "20e0ced30da74923a401d96cea22285e",
          "Name": "zTranslation",
          "Description": "Displacement along Z-axis.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d7a54cafddaf44f1bf064a852db6f9ad",
          "Name": "Geometry",
          "Description": "Transformed Geometry.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Translates any given geometry by the given displacements in the x, y, and z directions defined in WCS respectively.\n\nGeometry.Translate (xTranslation: double = 0, yTranslation: double = 0, zTranslation: double = 0): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "9549f4d8a3244ec3a35c8b005adac5c3",
      "Inputs": [
        {
          "Id": "823afa2198a24921ae2d3382753b3ded",
          "Name": "x",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb06564032164046a536f14d90e2210f",
          "Name": "y",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6316464966f747cb8bc00d8dc6903140",
          "Name": "z",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2c96571a032f446c80aa8b33392bb524",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 10000.0,
      "MinimumValue": 2000.0,
      "StepValue": 250.0,
      "InputValue": 3250.0,
      "Id": "05da1259731d4e76854330ce1b807096",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b0903ecdbb694bd59442c9b944218e58",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 5000.0,
      "MinimumValue": 2000.0,
      "StepValue": 250.0,
      "InputValue": 4250.0,
      "Id": "4bccabe4ed244ad895d34bd2f3aae1bb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f7f3a6e98a704fbda3bdc09a9674a38a",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Celery.UI.GraphMap, Celery26",
      "CurveType": "Parabola",
      "PointFreeSine1": "0,0",
      "PointFreeSine2": "294,258",
      "PointBezier1": "0,258,True",
      "PointBezier2": "294,258,False",
      "PointBezCont1": "50,100",
      "PointBezCont2": "244,100",
      "PointLinear1": "0,258",
      "PointLinear2": "294,0",
      "PointParabolic1": "147,0",
      "PointParabolic2": "294,258",
      "PointPerlin01": "147,0,0,0,False",
      "PointPerlin02": "1,258,0,0,True",
      "PointPerlin11": "147,129",
      "NodeType": "ExtensionNode",
      "Id": "1396ae9bcfca49478e144a8bde85534f",
      "Inputs": [
        {
          "Id": "9d647e454172412e930b9af84bf93507",
          "Name": "minLimit",
          "Description": "Minimum limit of the domain.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "386ff5591cae429bbc553e0292c4d767",
          "Name": "maxLimit",
          "Description": "Maximum limit of the domain.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9e96d5c0b37649468cf3aec3523efc00",
          "Name": "count",
          "Description": "Number of values to be generated to the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ca3423159d5241abba4d23b8b28db50a",
          "Name": "numbers",
          "Description": "Numerical values generated from the map.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A graph for mapping numerical values based on curves."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.Curves",
      "Id": "8866bc03784d484f8b43d9a92d83a74b",
      "Inputs": [
        {
          "Id": "12980392149041118dc5324adf6293eb",
          "Name": "polyCurve",
          "Description": "Autodesk.DesignScript.Geometry.PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ae7f1d924984e63ba4ce5761f721a7f",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns curves of the polycurve\n\nPolyCurve.Curves ( ): Curve[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.WallTypes, DSRevitNodesUI",
      "SelectedIndex": 2,
      "SelectedString": "Curtain_Wall-Storefront",
      "NodeType": "ExtensionNode",
      "Id": "4a703b20434d43c2957c71d3a5edd898",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2a480b25ce12467aae417044817e39a6",
          "Name": "Wall Type",
          "Description": "The selected Wall Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All wall types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Wall.ByCurveAndHeight@Autodesk.DesignScript.Geometry.Curve,double,Revit.Elements.Level,Revit.Elements.WallType",
      "Id": "8540568eefbb46348b6f1fc61e149c20",
      "Inputs": [
        {
          "Id": "ce472fe10f52454f8981042f3552677f",
          "Name": "curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89c7b33a09bb41f580def60fbf1ac90d",
          "Name": "height",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "10b68eaa43844159af79bdffefc1b837",
          "Name": "level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ce691c4ef9d14600a846fd606034f557",
          "Name": "wallType",
          "Description": "WallType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0919b6532c864d55a945ebc374167416",
          "Name": "Wall",
          "Description": "Wall",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit Wall from a guiding Curve, height, Level, and WallType\n\nWall.ByCurveAndHeight (curve: Curve, height: double, level: Level, wallType: WallType): Wall"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "8cfbc2f4846a4f8d901689522792becf",
      "Inputs": [
        {
          "Id": "d58d1d01107245f08dfe66650a556180",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c16a3bbe916943b08f876ac8b1ec7f90",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5b1b9607ffee4e42a3596d2759930917",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..x-2;",
      "Id": "ede6d1a331eb4402b4762904953d7e0e",
      "Inputs": [
        {
          "Id": "1b6546dd2e1e46c19a2c22152eaa5cd9",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "264f0b858ea243ca932ae2589c7cf103",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "24ead240ff744a70af475f7911b5d84a",
      "Inputs": [
        {
          "Id": "d697c4b23694443d9d866a8993468459",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9cd84807ff0e4f65bb19c75414b10636",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.Offset@double",
      "Id": "aefce373b44748bc822821a3508f5eb8",
      "Inputs": [
        {
          "Id": "598e776bbfe1454c9503adfd42f696b4",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "915776717b2346ea9941e45c48f4d28e",
          "Name": "distance",
          "Description": "A positive or negative distance to offset\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bb27adecd5494bdcb15c84970cdc5243",
          "Name": "Curve",
          "Description": "new offset curves",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Offset a Curve by a specified amount. Curve must be planar.\n\nCurve.Offset (distance: double = 1): Curve"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 500.0,
      "MinimumValue": 100.0,
      "StepValue": 50.0,
      "InputValue": 100.0,
      "Id": "ecfac6026a8542859c80c3264746b0f0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2b9cf5110028490bb7943d33da4988b0",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 500.0,
      "MinimumValue": 100.0,
      "StepValue": 50.0,
      "InputValue": 450.0,
      "Id": "00e650887d924395a417615d49f7c927",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aee2a0246c7240478e0c32993090a169",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 0,
      "SelectedString": "AFD_adaptive family:AFD_adaptive family",
      "NodeType": "ExtensionNode",
      "Id": "ea62a6e692f5461980c448f240fbe2f9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "01123a411a1247888288694521e09cdc",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.ByLoft@Autodesk.DesignScript.Geometry.Curve[]",
      "Id": "e5274cd029aa43549f7492d55658ea3e",
      "Inputs": [
        {
          "Id": "9dd31020502d4c1e81eb3d7f706d7e59",
          "Name": "crossSections",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "884dcd109bbd40ea9a954c5c17a8cfcb",
          "Name": "Surface",
          "Description": "Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Surface by lofting between input cross section Curves.\n\nSurface.ByLoft (crossSections: Curve[]): Surface"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.AdaptiveComponent.ByPoints@Autodesk.DesignScript.Geometry.Point[][],Revit.Elements.FamilyType",
      "Id": "5aaf0c8c4dc14077b8f52b93d539ee99",
      "Inputs": [
        {
          "Id": "ca1d370ad66c4e0496ea13d9ad7162dd",
          "Name": "points",
          "Description": "a two-dimensional array of points\n\nPoint[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6c8979fcfb99485eaf6ee4653a588bc1",
          "Name": "familyType",
          "Description": "a family type to use to create the adaptive components\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "32a3183635cd450b95108629f3a12bae",
          "Name": "AdaptiveComponent[]..[]",
          "Description": "AdaptiveComponent[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a list of adaptive components from two-dimensional array of points\n\nAdaptiveComponent.ByPoints (points: Point[][], familyType: FamilyType): AdaptiveComponent[]..[]"
    },
    {
      "ConcreteType": "Celery.UI.GraphMap, Celery26",
      "CurveType": "PerlinNoise",
      "PointFreeSine1": "0,0",
      "PointFreeSine2": "294,258",
      "PointBezier1": "0,258,True",
      "PointBezier2": "294,258,False",
      "PointBezCont1": "50,100",
      "PointBezCont2": "244,100",
      "PointLinear1": "0,258",
      "PointLinear2": "294,0",
      "PointParabolic1": "147,0",
      "PointParabolic2": "294,258",
      "PointPerlin01": "147,0,0,0,False",
      "PointPerlin02": "1,258,0,0,True",
      "PointPerlin11": "147,129",
      "NodeType": "ExtensionNode",
      "Id": "84c805b469ca48eebc3c8e796f07bb0f",
      "Inputs": [
        {
          "Id": "bcd2cbd293e2422799504f1d70969b89",
          "Name": "minLimit",
          "Description": "Minimum limit of the domain.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54eae67c69b34bba8307d40c653d64f7",
          "Name": "maxLimit",
          "Description": "Maximum limit of the domain.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a1eab284c36643a8bd74d078cfc63311",
          "Name": "count",
          "Description": "Number of values to be generated to the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ba4bb9b0a6e4777bee71f98edbd1e7e",
          "Name": "numbers",
          "Description": "Numerical values generated from the map.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A graph for mapping numerical values based on curves."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.GetIsoline@int,double",
      "Id": "358c16b5506f48bda3f7ce0f547b08d6",
      "Inputs": [
        {
          "Id": "23eeadf2d60d45289f03a4b9e2d69f45",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3a76759fe894808b6edf57b4ab7df25",
          "Name": "isoDirection",
          "Description": "If direction == 0, creates a U parameter line, if direction == 1, creates a V parameter line.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c0a35cc14674324bfa7070b9505b03e",
          "Name": "parameter",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fae0f9bb1b4d4727a1c8731581f6bde8",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a parameter line curve on the given surface. Create a Curve that represents a u or v parameter line on the Surface. A parameter line runs in the direction of increasing u or v parameter at a constant opposite u or v parameter. The resulting Curve will match the Surface parameterisation and its range will be bounded by the Surface parameter range. The type of Curve returned will depend on the Surface type.\n\nSurface.GetIsoline (isoDirection: int = 0, parameter: double = 0): Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "92f928cd957041b996cdaa6d7b644549",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8bbf0a861a1b440384336b1fc65628b1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..1..#v;",
      "Id": "66468f4598da40fcbc4489da79561e2a",
      "Inputs": [
        {
          "Id": "6e6f9a074528467691e21fc1f3ff39af",
          "Name": "v",
          "Description": "v",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fe832fd03f4343f796ce13959075fd8a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 36,
      "MaximumValue": 80,
      "MinimumValue": 20,
      "StepValue": 1,
      "Id": "6e55d91b790541e4a1945b191e203218",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "226907de7a0040f3b41279fea95b5ee0",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "ec4be2e6eb2a42b1bfe8682f675a086b",
      "Inputs": [
        {
          "Id": "cf347fff129d4143b913ed752fab7aad",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b08a9bc479d4e269a90fe3909cd2484",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "722ddfd5f9b0410ca64bba0d0637aea3",
          "Name": "Geometry[]",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Get the intersection Geometry for this object and another\n\nGeometry.Intersect (other: Geometry): Geometry[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "40f1dc29cd9047d8a499c052613a2d50",
      "Inputs": [
        {
          "Id": "4aef2856ad6a4d60bdff3322ee5865eb",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "de870dcd29ef4b688a3953ad5e506266",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6160c090365042eb9f9fc1f4dad68292",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "695c50ef-e5b3-46f8-93c3-bca2274bdfa5",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "8588411b84cc467da77bee2e10188aca",
      "Inputs": [
        {
          "Id": "3db36b36904943749572496abc9b7a84",
          "Name": "pointGrid",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "552b773f7c5d4cefa198daa5e226a493",
          "Name": "wrap",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "de34e4abf932439fb5adf738f9b01d76",
          "Name": "pointSets",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create groups of 4 items describing the \"cells\" of a rectangular grid of data.  In the case of a grid of points, the output will be the set of points describing the corners of 4-pointed panels."
    }
  ],
  "Connectors": [
    {
      "Start": "da46d679dd7f4cb4bf53f6c3acc994a3",
      "End": "3ba780ffcc9c4db89a40ef39c0ba809c",
      "Id": "f5c6db98f82046248a03fcd106bccd44"
    },
    {
      "Start": "da46d679dd7f4cb4bf53f6c3acc994a3",
      "End": "598e776bbfe1454c9503adfd42f696b4",
      "Id": "cd529f7ea67c4777be81cc925f3b9372"
    },
    {
      "Start": "4885c3b645a743aea2d3052806d815a4",
      "End": "1f4e49b510c54765b0b0cbfcc55bd799",
      "Id": "161ef69def5d49babd2d9869a77ed229"
    },
    {
      "Start": "4885c3b645a743aea2d3052806d815a4",
      "End": "b47a0601e6204531b2db84623542aa22",
      "Id": "5f7432e1527a496b8b01d035dbe4b880"
    },
    {
      "Start": "feaf2d7aaebc4162be0f4ed759fa9cf3",
      "End": "031efae28de24053bacbdfe43c6d3d48",
      "Id": "e30536da3d5e4dd199c10a22b1c21e73"
    },
    {
      "Start": "feaf2d7aaebc4162be0f4ed759fa9cf3",
      "End": "9e96d5c0b37649468cf3aec3523efc00",
      "Id": "6c12fdc398ee43f9a1e2a4e7eb16246b"
    },
    {
      "Start": "feaf2d7aaebc4162be0f4ed759fa9cf3",
      "End": "1b6546dd2e1e46c19a2c22152eaa5cd9",
      "Id": "c18ca7958d1c4e21b4d03b3d6a412f6e"
    },
    {
      "Start": "feaf2d7aaebc4162be0f4ed759fa9cf3",
      "End": "a1eab284c36643a8bd74d078cfc63311",
      "Id": "e029199fbc784bd7a8e2a4dd53f7f631"
    },
    {
      "Start": "72f10f14d6a84e9a899a8c7a205d31fa",
      "End": "f45bd326c6d44f74a7733cf582d39280",
      "Id": "f8e4c94c01bb4b10a3cdc2f42d174e67"
    },
    {
      "Start": "72f10f14d6a84e9a899a8c7a205d31fa",
      "End": "12980392149041118dc5324adf6293eb",
      "Id": "1eef668254274ffdad3de84bd37cd5b1"
    },
    {
      "Start": "4f9d2046be8947bb929ca4ecd236214c",
      "End": "1b133377bd5047d09a51b242ce3b96e5",
      "Id": "4e88e667b4234d7d80d4a34700e102b2"
    },
    {
      "Start": "4f9d2046be8947bb929ca4ecd236214c",
      "End": "20e0ced30da74923a401d96cea22285e",
      "Id": "d0419e3b50ce488792dd510dcd491643"
    },
    {
      "Start": "ef16d72338904c44a7b959c5bb9a5b13",
      "End": "cb2da2b24d1a4a83a2ddd909db934146",
      "Id": "dc5493015bf4450f9861b322cbf2b52c"
    },
    {
      "Start": "ef16d72338904c44a7b959c5bb9a5b13",
      "End": "89c7b33a09bb41f580def60fbf1ac90d",
      "Id": "a1bfe93768494af0ab9fff64b1570f0e"
    },
    {
      "Start": "274e859ee6b046cdab7b56e948228095",
      "End": "1a0d4880140743e1bb544bc00ce476b7",
      "Id": "3c722298f84647f78aa6e4aeac7e3773"
    },
    {
      "Start": "0d3b3363a7e14644a7819c0c1425f728",
      "End": "ec3069f77c134fd4bd867e7d776ac76a",
      "Id": "d4e01b1a0cf64b668691bf97419af840"
    },
    {
      "Start": "0d3b3363a7e14644a7819c0c1425f728",
      "End": "d58d1d01107245f08dfe66650a556180",
      "Id": "58d691523a4e4da6a3132e503c6e6b17"
    },
    {
      "Start": "67b849a22e9045a5b265879ac9ee4327",
      "End": "7cb7cba229cf44a1934e8dd3ebc1c89c",
      "Id": "1f7682202a0c411eb3b6bfb0e473d6cf"
    },
    {
      "Start": "9992b4a82997497da72645d90a474f61",
      "End": "364ff1e1835548a4a9d3d1550f3c8a30",
      "Id": "955fde3452e94ab08f0dd9af197e28e4"
    },
    {
      "Start": "fe2eab02e82849c3a241129ca7a96630",
      "End": "6bce9a1218ea4899babe4efabef1430e",
      "Id": "a3edfd7c12a643f1b548d1a10bea3af1"
    },
    {
      "Start": "6244e06df0fc407996f1f20c19b246ae",
      "End": "2ed0081ea7c1403687e3a8b233f4912a",
      "Id": "98ce2e6a64534e798895ff85f4e030b1"
    },
    {
      "Start": "d7a54cafddaf44f1bf064a852db6f9ad",
      "End": "38c3d8ed3a9d44ddae8c8c011f1e63bc",
      "Id": "77aa602dead643409057b0d8df3cce8c"
    },
    {
      "Start": "2c96571a032f446c80aa8b33392bb524",
      "End": "7a79d55565e04b549090d362686482d4",
      "Id": "eff6157e37f74268af47c0c6dc5dcd2e"
    },
    {
      "Start": "b0903ecdbb694bd59442c9b944218e58",
      "End": "9d647e454172412e930b9af84bf93507",
      "Id": "712c5621f68f49d1953eee812e6df4ba"
    },
    {
      "Start": "f7f3a6e98a704fbda3bdc09a9674a38a",
      "End": "386ff5591cae429bbc553e0292c4d767",
      "Id": "c3ccb5257392486ea4f004bda6f4f6e4"
    },
    {
      "Start": "ca3423159d5241abba4d23b8b28db50a",
      "End": "b060c60a3ce448f29b4668373687c86f",
      "Id": "e3ce3debac764541a26c88fb743d4db4"
    },
    {
      "Start": "8ae7f1d924984e63ba4ce5761f721a7f",
      "End": "ce472fe10f52454f8981042f3552677f",
      "Id": "f8bd8e8a4fe84de18d03c3d948a7e11b"
    },
    {
      "Start": "2a480b25ce12467aae417044817e39a6",
      "End": "ce691c4ef9d14600a846fd606034f557",
      "Id": "bfb3602360b745b9816a5c1c1ba6723a"
    },
    {
      "Start": "5b1b9607ffee4e42a3596d2759930917",
      "End": "10b68eaa43844159af79bdffefc1b837",
      "Id": "c29ceb2eba1043a29b3c59982dd65695"
    },
    {
      "Start": "264f0b858ea243ca932ae2589c7cf103",
      "End": "d697c4b23694443d9d866a8993468459",
      "Id": "29ca4dcd1d694686abd9d699794ee36d"
    },
    {
      "Start": "9cd84807ff0e4f65bb19c75414b10636",
      "End": "c16a3bbe916943b08f876ac8b1ec7f90",
      "Id": "792e6ac0cb7c45baa0ad2b247796c4ee"
    },
    {
      "Start": "bb27adecd5494bdcb15c84970cdc5243",
      "End": "9dd31020502d4c1e81eb3d7f706d7e59",
      "Id": "e0f174f5d716477ca7bbcb12ed22c473"
    },
    {
      "Start": "bb27adecd5494bdcb15c84970cdc5243",
      "End": "cf347fff129d4143b913ed752fab7aad",
      "Id": "96207679d89d41e78eb5446dacb7acf5"
    },
    {
      "Start": "2b9cf5110028490bb7943d33da4988b0",
      "End": "bcd2cbd293e2422799504f1d70969b89",
      "Id": "e0b6ed8f02504cc4a269e55899ca92cb"
    },
    {
      "Start": "aee2a0246c7240478e0c32993090a169",
      "End": "54eae67c69b34bba8307d40c653d64f7",
      "Id": "957e9e9d2c704193bd470a5c00f94a1b"
    },
    {
      "Start": "01123a411a1247888288694521e09cdc",
      "End": "6c8979fcfb99485eaf6ee4653a588bc1",
      "Id": "1e02a90037ec4b98879c63ac94057b9d"
    },
    {
      "Start": "884dcd109bbd40ea9a954c5c17a8cfcb",
      "End": "23eeadf2d60d45289f03a4b9e2d69f45",
      "Id": "f21e53ddff754ba688dca3c116e3266b"
    },
    {
      "Start": "6ba4bb9b0a6e4777bee71f98edbd1e7e",
      "End": "915776717b2346ea9941e45c48f4d28e",
      "Id": "d4450523200948c5ab5d604bb8f5bc00"
    },
    {
      "Start": "fae0f9bb1b4d4727a1c8731581f6bde8",
      "End": "6b08a9bc479d4e269a90fe3909cd2484",
      "Id": "44b9468f21514914b22e19109c4b69ac"
    },
    {
      "Start": "8bbf0a861a1b440384336b1fc65628b1",
      "End": "e3a76759fe894808b6edf57b4ab7df25",
      "Id": "53d0f107880047ada514766345ab84e4"
    },
    {
      "Start": "fe832fd03f4343f796ce13959075fd8a",
      "End": "4c0a35cc14674324bfa7070b9505b03e",
      "Id": "b54a0d9c2ce448fb8ed4a759fc4b88cb"
    },
    {
      "Start": "226907de7a0040f3b41279fea95b5ee0",
      "End": "6e6f9a074528467691e21fc1f3ff39af",
      "Id": "ad960657947b49a89f28bc3820716402"
    },
    {
      "Start": "722ddfd5f9b0410ca64bba0d0637aea3",
      "End": "4aef2856ad6a4d60bdff3322ee5865eb",
      "Id": "6e4a90c35cec439ba6bd38534f774fba"
    },
    {
      "Start": "6160c090365042eb9f9fc1f4dad68292",
      "End": "3db36b36904943749572496abc9b7a84",
      "Id": "54a5763f8f8d440f83d202b75a146aa1"
    },
    {
      "Start": "de34e4abf932439fb5adf738f9b01d76",
      "End": "ca1d370ad66c4e0496ea13d9ad7162dd",
      "Id": "384aa054fad24327a6b8bc65a4a26741"
    }
  ],
  "Dependencies": [
    "695c50ef-e5b3-46f8-93c3-bca2274bdfa5"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Celery for Dynamo 2.5",
      "Version": "20.6.7",
      "ReferenceType": "Package",
      "Nodes": [
        "1396ae9bcfca49478e144a8bde85534f",
        "84c805b469ca48eebc3c8e796f07bb0f"
      ]
    },
    {
      "Name": "Ampersand",
      "Version": "2019.12.31",
      "ReferenceType": "Package",
      "Nodes": [
        "8588411b84cc467da77bee2e10188aca"
      ]
    }
  ],
  "Bindings": [
    {
      "NodeId": "0714d60a-c271-4a2f-ae1b-9e60338fcfa6",
      "Binding": {
        "ByElevation_InClassDecl-1_InFunctionScope-1_Instance0_0714d60a-c271-4a2f-ae1b-9e60338fcfa6": ""
      }
    },
    {
      "NodeId": "0fe902b4-ff27-47a8-96cc-bda113664e96",
      "Binding": {
        "ByOutlineTypeAndLevel_InClassDecl-1_InFunctionScope-1_Instance0_0fe902b4-ff27-47a8-96cc-bda113664e96": ""
      }
    },
    {
      "NodeId": "8540568e-efbb-4634-8b6f-1fc61e149c20",
      "Binding": {
        "ByCurveAndHeight_InClassDecl-1_InFunctionScope-1_Instance0_8540568e-efbb-4634-8b6f-1fc61e149c20": ""
      }
    },
    {
      "NodeId": "5aaf0c8c-4dc1-4077-b8f5-2b93d539ee99",
      "Binding": {
        "ByPoints_InClassDecl-1_InFunctionScope-1_Instance0_5aaf0c8c-4dc1-4077-b8f5-2b93d539ee99": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 100.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.1.3976",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 31833.19140625,
      "EyeY": 43742.6796875,
      "EyeZ": -7452.03173828125,
      "LookX": -33737.8828125,
      "LookY": -30692.98046875,
      "LookZ": -8191.91162109375,
      "UpX": -0.11948086321353912,
      "UpY": 0.95645761489868164,
      "UpZ": 0.26629561185836792
    },
    "NodeViews": [
      {
        "ShowGeometry": false,
        "Name": "Circle.ByCenterPointRadius",
        "Id": "0a4fdc4604f0424aacbacd53c1ea32d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -24.249980376902158,
        "Y": -1501.6992713281813
      },
      {
        "ShowGeometry": true,
        "Name": "Sides",
        "Id": "59866a0f503f48c7929fa0dd319b4093",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -23.234063938724375,
        "Y": -1377.4086690102426
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "45f51364bbc24f27939e9c1983707c23",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1624.1449202527522,
        "Y": -891.40980470131217
      },
      {
        "ShowGeometry": false,
        "Name": "Polygon.RegularPolygon",
        "Id": "a2f8fa7c4b934608ab901acc3efc37dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 415.18912497766814,
        "Y": -1509.5600804456749
      },
      {
        "ShowGeometry": true,
        "Name": "Sequence",
        "Id": "577ad8dfdef34e5fa560007cd45d58b7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -746.69882549236945,
        "Y": -830.74115665882846
      },
      {
        "ShowGeometry": true,
        "Name": "Floor Height",
        "Id": "09703ae471b5408194b7704a24335a83",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1624.1449202527522,
        "Y": -815.79241542329726
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d22ebd2bbbaa47b1b1207c91e5b41e46",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 748.089484867563,
        "Y": -1065.9166607318521
      },
      {
        "ShowGeometry": true,
        "Name": "Level.ByElevation",
        "Id": "0714d60ac2714a2fae1b9e60338fcfa6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -474.04777427477563,
        "Y": -833.32661904290467
      },
      {
        "ShowGeometry": true,
        "Name": "Floor Types",
        "Id": "2ae92e17de4645fea271e7f1d3c63312",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1439.463574641208,
        "Y": -1065.5188728358323
      },
      {
        "ShowGeometry": false,
        "Name": "Curve.PointAtParameter",
        "Id": "d3f377306b37457c9cee5f110e85b5a6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 943.99365430515581,
        "Y": -1200.6843715332584
      },
      {
        "ShowGeometry": false,
        "Name": "List.Flatten",
        "Id": "65a400c65db749ae89c9e614db75d593",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1166.5069180565,
        "Y": -1201.2911846964264
      },
      {
        "ShowGeometry": true,
        "Name": "Floor.ByOutlineTypeAndLevel",
        "Id": "0fe902b4ff2747a896ccbda113664e96",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1744.5945324024879,
        "Y": -1059.5302618453325
      },
      {
        "ShowGeometry": false,
        "Name": "PolyCurve.ByPoints",
        "Id": "211ac81d4aac45b7afc3a52047789130",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1438.3725975014579,
        "Y": -1202.8225418312725
      },
      {
        "ShowGeometry": false,
        "Name": "Geometry.Translate",
        "Id": "6e3c81152125464f9fc0dd688830a624",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -343.64682159661152,
        "Y": -1084.5122732021171
      },
      {
        "ShowGeometry": false,
        "Name": "Point.ByCoordinates",
        "Id": "9549f4d8a3244ec3a35c8b005adac5c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -569.34155434300965,
        "Y": -1084.479988588226
      },
      {
        "ShowGeometry": true,
        "Name": "Radius",
        "Id": "05da1259731d4e76854330ce1b807096",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -978.88767287382348,
        "Y": -1514.0114149247133
      },
      {
        "ShowGeometry": true,
        "Name": "Radius",
        "Id": "4bccabe4ed244ad895d34bd2f3aae1bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -979.50409424016016,
        "Y": -1445.6954860509786
      },
      {
        "ShowGeometry": true,
        "Name": "GraphMap",
        "Id": "1396ae9bcfca49478e144a8bde85534f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -576.01756471805311,
        "Y": -1513.0134008809091
      },
      {
        "ShowGeometry": false,
        "Name": "PolyCurve.Curves",
        "Id": "8866bc03784d484f8b43d9a92d83a74b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 934.5732321037774,
        "Y": -808.186140335788
      },
      {
        "ShowGeometry": true,
        "Name": "Wall Types",
        "Id": "4a703b20434d43c2957c71d3a5edd898",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 932.63642202764845,
        "Y": -686.86383098218857
      },
      {
        "ShowGeometry": true,
        "Name": "Wall.ByCurveAndHeight",
        "Id": "8540568eefbb46348b6f1fc61e149c20",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1195.4371151415078,
        "Y": -808.69247113261758
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "8cfbc2f4846a4f8d901689522792becf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 713.69283785994276,
        "Y": -715.50148331308833
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ede6d1a331eb4402b4762904953d7e0e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -754.69642281637334,
        "Y": -586.67466596782822
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "24ead240ff744a70af475f7911b5d84a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -608.69032951918939,
        "Y": -588.56434919743072
      },
      {
        "ShowGeometry": false,
        "Name": "Curve.Offset",
        "Id": "aefce373b44748bc822821a3508f5eb8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 456.78286559590481,
        "Y": -1958.6589798545469
      },
      {
        "ShowGeometry": true,
        "Name": "Radius",
        "Id": "ecfac6026a8542859c80c3264746b0f0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -642.843972140512,
        "Y": -1958.6589798545469
      },
      {
        "ShowGeometry": true,
        "Name": "Radius",
        "Id": "00e650887d924395a417615d49f7c927",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -643.3531112960577,
        "Y": -1897.395989071922
      },
      {
        "ShowGeometry": true,
        "Name": "Family Types",
        "Id": "ea62a6e692f5461980c448f240fbe2f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2003.9875242725811,
        "Y": -1796.4511213371877
      },
      {
        "ShowGeometry": false,
        "Name": "Surface.ByLoft",
        "Id": "e5274cd029aa43549f7492d55658ea3e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 716.49670470348383,
        "Y": -1847.8162941584783
      },
      {
        "ShowGeometry": true,
        "Name": "AdaptiveComponent.ByPoints",
        "Id": "5aaf0c8c4dc14077b8f52b93d539ee99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2381.0538965558553,
        "Y": -1822.4010712951572
      },
      {
        "ShowGeometry": true,
        "Name": "GraphMap",
        "Id": "84c805b469ca48eebc3c8e796f07bb0f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -170.14550263789511,
        "Y": -1958.6589798545469
      },
      {
        "ShowGeometry": false,
        "Name": "Surface.GetIsoline",
        "Id": "358c16b5506f48bda3f7ce0f547b08d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1241.1383026707479,
        "Y": -1848.5329254992009
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "92f928cd957041b996cdaa6d7b644549",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 718.86121241922558,
        "Y": -1742.6729958585324
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "66468f4598da40fcbc4489da79561e2a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1063.2387340104262,
        "Y": -1661.9258916885756
      },
      {
        "ShowGeometry": true,
        "Name": "Integer Slider",
        "Id": "6e55d91b790541e4a1945b191e203218",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 721.73083629877362,
        "Y": -1633.758892638162
      },
      {
        "ShowGeometry": false,
        "Name": "Geometry.Intersect",
        "Id": "ec4be2e6eb2a42b1bfe8682f675a086b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1504.2503821619805,
        "Y": -1956.8581159433677
      },
      {
        "ShowGeometry": false,
        "Name": "List.Flatten",
        "Id": "40f1dc29cd9047d8a499c052613a2d50",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1774.3731881460317,
        "Y": -1958.2444865491263
      },
      {
        "ShowGeometry": false,
        "Name": "[&] PointGrid.ToQuadSets",
        "Id": "8588411b84cc467da77bee2e10188aca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2110.8562502885729,
        "Y": -1916.1162933953624
      }
    ],
    "Annotations": [
      {
        "Id": "cd10cbad1bea410b8b236b4370d2e1e2",
        "Title": "Odsunięcie obrysów kondygnacji dla ściany osłonowej",
        "Nodes": [
          "aefce373b44748bc822821a3508f5eb8",
          "ecfac6026a8542859c80c3264746b0f0",
          "00e650887d924395a417615d49f7c927",
          "84c805b469ca48eebc3c8e796f07bb0f"
        ],
        "Left": -653.3531112960577,
        "Top": -2011.6589798545469,
        "Width": 1322.1359768919624,
        "Height": 420.0,
        "FontSize": 36.0,
        "InitialTop": -1958.6589798545469,
        "InitialHeight": 206.26299078262491,
        "TextblockHeight": 43.0,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "72809e764e794a56b5baf7795cf9d545",
        "Title": "Utworzenie obrysów kondygnacji",
        "Nodes": [
          "0a4fdc4604f0424aacbacd53c1ea32d1",
          "59866a0f503f48c7929fa0dd319b4093",
          "a2f8fa7c4b934608ab901acc3efc37dc",
          "6e3c81152125464f9fc0dd688830a624",
          "9549f4d8a3244ec3a35c8b005adac5c3",
          "05da1259731d4e76854330ce1b807096",
          "4bccabe4ed244ad895d34bd2f3aae1bb",
          "1396ae9bcfca49478e144a8bde85534f"
        ],
        "Left": -989.50409424016016,
        "Top": -1567.0114149247133,
        "Width": 1656.6932192178283,
        "Height": 653.49914172259628,
        "FontSize": 36.0,
        "InitialTop": -1514.0114149247133,
        "InitialHeight": 574.53142633648736,
        "TextblockHeight": 43.0,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "b383fe5278d04b438eeafffc112ac2af",
        "Title": "Utworzenie ścian pomiędzy stropami",
        "Nodes": [
          "8866bc03784d484f8b43d9a92d83a74b",
          "4a703b20434d43c2957c71d3a5edd898",
          "8540568eefbb46348b6f1fc61e149c20",
          "8cfbc2f4846a4f8d901689522792becf"
        ],
        "Left": 703.69283785994276,
        "Top": -861.69247113261758,
        "Width": 699.744277281565,
        "Height": 267.828640150429,
        "FontSize": 36.0,
        "InitialTop": -808.69247113261758,
        "InitialHeight": 266.828640150429,
        "TextblockHeight": 43.0,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "368f2cbcdec44a2d95625dddd4c30923",
        "Title": "Utworzenie stropów",
        "Nodes": [
          "2ae92e17de4645fea271e7f1d3c63312",
          "0fe902b4ff2747a896ccbda113664e96",
          "211ac81d4aac45b7afc3a52047789130"
        ],
        "Left": 1428.3725975014579,
        "Top": -1255.8225418312725,
        "Width": 534.22193490103,
        "Height": 341.29227998594,
        "FontSize": 36.0,
        "InitialTop": -1202.8225418312725,
        "InitialHeight": 288.29227998594,
        "TextblockHeight": 43.0,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "aea895831fe34e07a862a19a014da593",
        "Title": "Utworzenie listy punktów do \"panelingu\"",
        "Nodes": [
          "e5274cd029aa43549f7492d55658ea3e",
          "358c16b5506f48bda3f7ce0f547b08d6",
          "92f928cd957041b996cdaa6d7b644549",
          "66468f4598da40fcbc4489da79561e2a",
          "6e55d91b790541e4a1945b191e203218",
          "ec4be2e6eb2a42b1bfe8682f675a086b",
          "40f1dc29cd9047d8a499c052613a2d50"
        ],
        "Left": 706.49670470348383,
        "Top": -2011.2444865491263,
        "Width": 1262.8764834425479,
        "Height": 445.48559391096433,
        "FontSize": 36.0,
        "InitialTop": -1958.2444865491263,
        "InitialHeight": 469.48559391096433,
        "TextblockHeight": 43.0,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "209f9c2dfbe3487f9d9957b38b46a6df",
        "Title": "Utworzenie ściany osłonowej wykorzystującej \"adaptive component\"",
        "Nodes": [
          "ea62a6e692f5461980c448f240fbe2f9",
          "5aaf0c8c4dc14077b8f52b93d539ee99",
          "8588411b84cc467da77bee2e10188aca"
        ],
        "Left": 1993.9875242725811,
        "Top": -2012.1162933953624,
        "Width": 731.06637228327418,
        "Height": 308.71522210020521,
        "FontSize": 36.0,
        "InitialTop": -1916.1162933953624,
        "InitialHeight": 264.66517205817468,
        "TextblockHeight": 86.0,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "c5def27483414283bec6c155c9d5afc5",
        "Title": "Utworzenie kondygnacji (Levels) w Revicie",
        "Nodes": [],
        "Left": -474.43768250033793,
        "Top": -866.25943250548221,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "d20cdceb54554cf282c14c37eaf24ec9",
        "Title": "Code Block, który eliminuje ścianę nad ostatnią kondygnacją",
        "Nodes": [],
        "Left": -755.13089665119583,
        "Top": -637.65730702900453,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "564233b5027c4a33942d8ab95b9b9a9c",
        "Title": "Utworzenie polikrzywej",
        "Nodes": [],
        "Left": 1731.303812223555,
        "Top": -1196.5778186185591,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3983c4ae445e425aa50dbb2c22aebbe4",
        "Title": "Utworzenie powierzchni",
        "Nodes": [],
        "Left": 715.81234109450986,
        "Top": -1888.1298818709186,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 602.42965028051719,
    "Y": 836.164496828141,
    "Zoom": 0.3221094511984382
  }
}